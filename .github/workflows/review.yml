name: PR Review Automation

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  automated-review:
    name: Automated PR Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Check PR Template Compliance
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            // Skip dependabot PRs
            if (pr.user.login === 'dependabot[bot]') {
              const report = '## PR Template Compliance Check\n\nSkipped automated PR from dependabot.\n\n*This is an automated PR template compliance check.*';

              // Find existing bot comments
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });

              const botComment = comments.data.find(comment =>
                comment.user.login === 'github-actions[bot]' &&
                comment.body.includes('PR Template Compliance Check')
              );

              if (botComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: report
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: report
                });
              }
              return;
            }

            const prBody = pr.body || '';

            // Check for required checklist items
            const requiredChecks = [
              '- [x] Code adheres to style guidelines.',
              '- [x] All tests pass.',
              '- [x] Documentation has been updated as needed.'
            ];

            const uncheckedItems = [];
            const missingItems = [];

            // Check if checklist items exist and are checked
            requiredChecks.forEach((item, index) => {
              const uncheckedPattern = item.replace('[x]', '[ ]');
              const itemDescription = item.replace('- [x] ', '');

              if (prBody.includes(item)) {
                // Item is checked
                return;
              } else if (prBody.includes(uncheckedPattern)) {
                // Item exists but unchecked
                uncheckedItems.push(itemDescription);
              } else {
                // Item is missing
                missingItems.push(itemDescription);
              }
            });

            // Check for required sections
            const requiredSections = [
              { section: '## Overview', display: 'Overview' },
              { section: '### Changes Made', display: 'Changes Made' },
              { section: '### Problems Resolved', display: 'Problems Resolved' }
            ];
            const missingSections = requiredSections.filter(item => !prBody.includes(item.section));

            let report = '## PR Template Compliance Check\n\n';

            if (uncheckedItems.length === 0 && missingItems.length === 0 && missingSections.length === 0) {
              report += 'All PR template requirements are satisfied.\n\n';
            } else {
              report += `@${pr.user.login} Please complete the following PR requirements:\n\n`;

              if (missingSections.length > 0) {
                report += '### Missing Sections\n';
                missingSections.forEach(item => {
                  report += `- ${item.display}\n`;
                });
                report += '\n';
              }

              if (uncheckedItems.length > 0) {
                report += '### Unchecked Items\n';
                uncheckedItems.forEach(item => {
                  report += `- [ ] ${item}\n`;
                });
                report += '\n';
              }

              if (missingItems.length > 0) {
                report += '### Missing Checklist Items\n';
                missingItems.forEach(item => {
                  report += `- [ ] ${item}\n`;
                });
                report += '\n';
              }
            }

            report += '*This is an automated PR template compliance check.*';

            // Fail the workflow if requirements are not met
            if (uncheckedItems.length > 0 || missingItems.length > 0 || missingSections.length > 0) {
              core.setFailed('PR template requirements are not satisfied. Please complete all required sections and checklist items.');
            }

            // Find existing bot comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.data.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('PR Template Compliance Check')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: report
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
            }
